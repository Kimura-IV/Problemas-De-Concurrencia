# -*- coding: utf-8 -*-
"""Filosofos-Comensales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nE3EWnw2Ipi7rYBs-POhEQcTOkm2iRen
"""

import time
from sys import stdout

def presentacion ():
  RED, WHITE, CYAN, GREEN, END = '\033[91m', '\33[46m', '\033[36m', '\033[1;32m', '\033[0m'

  print("""
  \033[1;32m
                                  .....                                               ____  ____   ___  ____  _     _____ __   __    _    ____   ____  _____
                          .'cokO000000Okdoc;'...                                    |  _ ||  _ \ | _ || __ )| |   | ____|  | |  |  | |  | ___| |  _ || ____|
                        .;d0NWMMMMMMMMMMMMMWWKko;.                                   | |_) | |_) | | | |  _ || |   |  _| | ||_|| | | _ | |___ | | | | |  _|
                  . .'ckNWWWWMMMMMMMMMMMWWWWWWWXkc.                                 |  __||  _ <| |_| | |_) | |___| |___| |   | || ___ | ___)| | |_| | |___
                ...'c0NWWWWWNWWMMMMMMMWWNNNWWWWWWNO;   ....                         |_|   |_| \_||___||____||_____|_____|_|   |_|_|   |_|____| |____||_____|
              .....'lkXWWWWWNNXKKXWWWWNK00KNNNWWWWWNOc.  ....                     
            ......,l0NXOdc;;clc;cxxdddxl;::;;:ld0NNOo;.  ....                      ____ ___  _   _  ____ _   _ ____  ____  _____ _   _  ____ ___    _    ____
          ..........coc,.      .'.;dxdlc:'.      .;k0o,.......                     | ___| _ || | | || ___| | | |  _ ||  _ || ____| | | || ___|_ _|  | |  | ___|
        ..........',.   ...     .,lc:;'.    ...   .;l'...'...  .                 | |  | | | |  || | |   | | | | |_) | |_) |  _| |  || | |    | |  | _ | |___ |
        ....''....'.   ..''... ...   .''. ..''...   ',. ..'''...                 | |__| |_| | ||  | |___| |_| |  _ <|  _ <| |___| ||  | |___ | | | ___ | ___)|
        ...','....,.   ..:l;',;'       ',..'cc...   .'.  .,''''.                  |____|___||_| |_||____||___||_| |_|_| |_|_____|_| |_||____|___|_|   |_|____|
        ..',,'.'..;'  ...,:c;,'.  ..    ..;lc;'..  ','.  .,''''.                 
        .'',,'.',''',,,;,;:'... .ld;,.  ..';;:;,''','..  .,,'''.                 
        .'',,,..'''.''',,......   ;l;'.  ...........','....','''..                  
        .',,,'...  ....   ...    ';'..     ...     ...'...','''..                
        .....      ..    .'.     .....     .;.     ......  .......                ___  _   _  _____  _____   ____  ____      _     _   _  _____  _____ 
                ...','......          ..     ,:.  'd0kooo;.      .                |_ _|| \ | ||_   _|| ____| / ___||  _ |    | |   | \ | ||_   _|| ____| ____ 
              .:kOkkOOc...                   .. .,cdddkx,         .               | | |  \| |  | |  |  _|  | |  _ | |_) |  | _ |  |  \| |  | |  |  _|  | ___|
                .xX0k0Od,                         ..,,';.                          | | | |\  |  | |  | |___ | |_| ||  _ <  | ___ | | |\  |  | |  | |___ |___ |
          ..    ,l:::,....                    .   ...,,     .                    |___||_| \_|  |_|  |_____| \____||_| \_||_|   |_||_| \_|  |_|  |_____||____|
      .     ..    ...           . ........ .                ..     .                  
      .   .. .                 .  ..... .....                ...        
        .dl..               ..... ..  .....               ..:x,                    1.- Helen Lisbeth Bernal Vera.
          ,:.                 .....   ......               ..;,.                    2.- Joe Fernando Vélez Calero.
                      ..        .........       .                                  3.- Renán Oswaldo Pérez Balladares.
                  ......                        ......                             4.- Jonatán Josué Guillén Salabarria.
                .........                ..   .........                            5.- Manuel Agustin Burgos Ramires.
              .  .''''','..                  .''''''..                 
                ...... ...''......         ..''''.'.....                
                .. ....  ..''..................   .                    
                          ..''...  ....      .                         
                            ............  ..                           
  """)
  print("\033[1;32m                                              _______  ______   ___  ____ ___ ____ ___ ___  _   _  ");
  print("\033[1;32m                                             | ____| \/ |  _ | | _ || ___|_ _| ___|_ _| _ || | | |  ");
  print("\033[1;32m                                             |  _|  |  || |_) | | | |___ || | |    | | | | |  || | ");
  print("\033[1;32m                                             | |___ |  ||  __|| |_| |___) | | |___ | | |_| | ||  | ");
  print("\033[1;32m                                             |_____|_||_|_|    |___||____|___|____|___|___||_| |_|  ");
  print("\033[1;32m                    ____ ___ ____ _____ _____ __  __    _    ____     ___  ____  _____ ____      _  _____ _____     _____  ____"); 
  print("\033[1;32m                   | ___|_ _| ___|_   _| ____|  ||  |  | |  | ___|   | _ ||  _ || ____|  _ |    | ||_   _|_ _| |   | | _ || ___|");
  print("\033[1;32m                   |___ || ||___ | | | |  _| | |||| | | _ | |___ |  | | | | |_) |  _| | |_) |  | _ | | |  | | | | | | | | |___ |");
  print("\033[1;32m                    ___) | | ___) || | | |___| |  | || ___ | ___) | | |_| |  __|| |___|  _ <  | ___ || |  | |  | V || |_| |___) |");
  print("\033[1;32m                   |____|___|____| |_| |_____|_|  |_|_|   |_|____|   |___||_|   |_____|_| |_||_|   |_|_| |___|  |_|  |___||____|\n");
  time.sleep(2)

  for i in range(101):
          time.sleep(0.01)
          stdout.write("\r{0}[{3}*{0}]{2} Iniciando Programa Por Favor Espere... %d%%".format(GREEN, END, CYAN, RED, WHITE) % i)
          stdout.flush()
          time.sleep(0.02)

  print (" ")
  print (" ")

if __name__ == '__main__':
  presentacion ()

# -Filósofos comensales -
import time
import random
import threading as th

cantidad = 5  #CANTIDAD DE FILOSOFOS
tiempo = 3    #TIEMPO DE ESTAR EN LA MESA

class filosofo(th.Thread): #CLASE DE HILO PERSONALIZADO
    semaforo = th.Lock() #SEMAFORO BINARIO ASEGURA LA EXCLUSION MUTUA
                         #ACQUIRE() BLOQUEA Y RELEASE() DESBLOQUEA
    estado = [] #PARA CONOCER EL ESTADO DE CADA FILOSOFO
    tenedores = [] #ARRAY DE SEMAFOROS PARA SINCRONIZAR ENTRE FILOSOFOS, MUESTRA QUIEN ESTA EN COLA DEL TENEDOR
    count=0
    filosofos = ["Aristoteles", "Pitagoras", "Socrates", "Platon", "Tales de Mileto"]

    def __init__(self):
        super().__init__()      #HERENCIA
        self.id=filosofo.count #DESIGNA EL ID AL FILOSOFO
        filosofo.count+=1 #AGREGA UNO A LA CANT DE FILOSOFOS
        filosofo.estado.append('PENSANDO') #EL FILOSOFO ENTRA A LA MESA EN ESTADO PENSANDO
        filosofo.tenedores.append(th.Semaphore(0)) #AGREGA EL SEMAFORO DE SU TENEDOR
        print("{} ".format(self.id), "{} - PENSANDO".format(self.filosofos[self.id]))

    def pensar(self):
        time.sleep(random.randint(0,5)) #CADA FILOSOFO SE TOMA DISTINTO TIEMPO PARA PENSAR, ALEATORIO

    def tomar(self):
        filosofo.semaforo.acquire() #SEÑALA QUE TOMARA LOS TENEDORES (EXCLUSION MUTUA)
        filosofo.estado[self.id] = 'HAMBRIENTO'
        self.verificar(self.id) #VERIFICA SUS VECINOS, SI NO PUEDE COMER NO SE BLOQUEARA EN EL SIGUIENTE ACQUIRE
        filosofo.semaforo.release() #SEÑALA QUE YA DEJO DE INTENTAR TOMAR LOS TENEDORES (CAMBIAR EL ARRAY ESTADO)
        filosofo.tenedores[self.id].acquire() #SOLO SI PODIA TOMARLOS SE BLOQUEARA CON ESTADO COMIENDO
   
    def derecha(self,i):
        return (i-1)%cantidad #BUSCAMOS EL INDICE DE LA DERECHA

    def izquierda(self,i):
        return(i+1)%cantidad #BUSCAMOS EL INDICE DE LA IZQUIERDA

    def verificar(self,i):
        if filosofo.estado[i] == 'HAMBRIENTO' and filosofo.estado[self.izquierda(i)] != 'COMIENDO' and \
                filosofo.estado[self.derecha(i)] != 'COMIENDO':
            #print("{} ".format(self.id), "{} - TOMA LOS TENEDORES".format(self.filosofos[self.id]))
            filosofo.estado[i]='COMIENDO'
            filosofo.tenedores[i].release()  #SI SUS VECINOS NO ESTAN COMIENDO AUMENTA EL SEMAFORO DEL TENEDOR Y CAMBIA SU ESTADO A COMIENDO


        elif filosofo.estado[i] == 'HAMBRIENTO' and filosofo.estado[self.izquierda(i)] != 'COMIENDO' and \
                filosofo.estado[self.derecha(i)] == 'COMIENDO':
            print("{} ".format(self.id), "{} - ESPERA EL TENEDOR DERECHO".format(self.filosofos[self.id]))
            time.sleep(1)

        elif filosofo.estado[i] == 'HAMBRIENTO' and filosofo.estado[self.izquierda(i)] == 'COMIENDO' and \
                filosofo.estado[self.derecha(i)] != 'COMIENDO':
            print("{} ".format(self.id), "{} - ESPERA EL TENEDOR IZQUIERDO".format(self.filosofos[self.id]))
            time.sleep(1)
    def comer(self):
        print("{} ".format(self.id), "{} - COMIENDO".format(self.filosofos[self.id]))
        time.sleep(3) #TIEMPO ARBITRARIO PARA COMER

    def soltar(self):
        filosofo.semaforo.acquire() #SEÑALA QUE SOLTARA LOS TENEDORES
        filosofo.estado[self.id] = 'PENSANDO'
        print("{} ".format(self.id), "{} - DEJO LOS TENEDORES".format(self.filosofos[self.id]))
        time.sleep(1)
        filosofo.semaforo.release() #YA TERMINO DE MANIPULAR TENEDORES
        print("{} ".format(self.id), "{} - PENSANDO".format(self.filosofos[self.id]))
        self.verificar(self.izquierda(self.id))
        self.verificar(self.derecha(self.id))

    def __del__(self):
        print("{} ".format(self.id), "{} - Se para de la mesa".format(self.filosofos[self.id]))  #NECESARIO PARA SABER CUANDO TERMINA EL THREAD

    def run(self):
        for i in range(tiempo):
            self.pensar() #EL FILOSOFO PIENSA
            self.tomar() #AGARRA LOS TENEDORES CORRESPONDIENTES
            self.comer() #COME
            self.soltar() #SUELTA LOS TENEDORES

def main():
    lista=[]
    for i in range(cantidad):
        lista.append(filosofo()) #AGREGA UN FILOSOFO A LA LISTA

    for f in lista:
        f.start() #ES EQUIVALENTE A RUN()

    for f in lista:
        f.join() #BLOQUEA HASTA QUE TERMINA EL THREAD

if __name__=="__main__":  #INDICA QUE SE EJECUTA EN EL PROGRAMA PRINCIPAL
    inicio = time.perf_counter () # conteo inicial del tiempo
    main()
    final = time.perf_counter ()  # conteo final del tiempo
    print (f'\nTiempot total: {round(final-inicio, 2)} segundos.')